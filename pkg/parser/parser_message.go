package parser

// systemMessageLevel implements four levels for messages and is used in conjunction with the parserMessage type.
type systemMessageLevel int

const (
	levelInfo systemMessageLevel = iota
	levelWarning
	levelError
	levelSevere
)

var systemMessageLevels = [...]string{
	"INFO",
	"WARNING",
	"ERROR",
	"SEVERE",
}

// String implments Stringer and return a string of the systemMessageLevel.
func (s systemMessageLevel) String() string {
	return systemMessageLevels[s]
}

// FromString returns the systemMessageLevel converted from the string name.
func systemMessageLevelFromString(name string) systemMessageLevel {
	for num, sLvl := range systemMessageLevels {
		if name == sLvl {
			return systemMessageLevel(num)
		}
	}
	return -1
}

// parserMessage implements messages generated by the parser. Parser messages are leveled using systemMessageLevels.
type parserMessage int

const (
	parserMessageNil parserMessage = iota
	infoOverlineTooShortForTitle
	infoUnexpectedTitleOverlineOrTransition
	infoUnderlineTooShortForTitle
	warningShortOverline
	warningShortUnderline
	warningExplicitMarkupWithUnIndent
	errorInvalidSectionOrTransitionMarker
	severeUnexpectedSectionTitle
	severeUnexpectedSectionTitleOrTransition
	severeIncompleteSectionTitle
	severeMissingMatchingUnderlineForOverline
	severeOverlineUnderlineMismatch
	severeTitleLevelInconsistent
)

var parserErrors = [...]string{
	"parserMessageNil",
	"infoOverlineTooShortForTitle",
	"infoUnexpectedTitleOverlineOrTransition",
	"infoUnderlineTooShortForTitle",
	"warningShortOverline",
	"warningShortUnderline",
	"warningExplicitMarkupWithUnIndent",
	"errorInvalidSectionOrTransitionMarker",
	"severeUnexpectedSectionTitle",
	"severeUnexpectedSectionTitleOrTransition",
	"severeIncompleteSectionTitle",
	"severeMissingMatchingUnderlineForOverline",
	"severeOverlineUnderlineMismatch",
	"severeTitleLevelInconsistent",
}

// String implements Stringer and returns the parserMessage as a string. The returned string is the parserMessage name, not
// the message itself.
func (p parserMessage) String() string {
	return parserErrors[p]
}

// Message returns the message of the parserMessage as a string.
func (p parserMessage) Message() (s string) {
	switch p {
	case infoOverlineTooShortForTitle:
		s = "Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."
	case infoUnexpectedTitleOverlineOrTransition:
		s = "Unexpected possible title overline or transition.\nTreating it as ordinary text because it's so short."
	case infoUnderlineTooShortForTitle:
		s = "Possible title underline, too short for the title.\nTreating it as ordinary text because it's so short."
	case warningShortOverline:
		s = "Title overline too short."
	case warningShortUnderline:
		s = "Title underline too short."
	case warningExplicitMarkupWithUnIndent:
		s = "Explicit markup ends without a blank line; unexpected unindent."
	case errorInvalidSectionOrTransitionMarker:
		s = "Invalid section title or transition marker."
	case severeUnexpectedSectionTitle:
		s = "Unexpected section title."
	case severeUnexpectedSectionTitleOrTransition:
		s = "Unexpected section title or transition."
	case severeIncompleteSectionTitle:
		s = "Incomplete section title."
	case severeMissingMatchingUnderlineForOverline:
		s = "Missing matching underline for section title overline."
	case severeOverlineUnderlineMismatch:
		s = "Title overline & underline mismatch."
	case severeTitleLevelInconsistent:
		s = "Title level inconsistent."
	}
	return
}

// Level returns the parserMessage level.
func (p parserMessage) Level() (s string) {
	lvl := int(p)
	switch {
	case lvl > 0 && lvl <= 3:
		s = "INFO"
	case lvl <= 6:
		s = "WARNING"
	case lvl == 7:
		s = "ERROR"
	case lvl >= 8:
		s = "SEVERE"
	}
	return
}
